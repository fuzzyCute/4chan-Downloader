#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Sep 22, 2017 10:36:28 PM
import sys, programz

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import threads_support

w = None
def create_threads(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = threads (w, rt)
    threads_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_threads():
    global w
    w.destroy()
    w = None


class threads:
    def __init__(self, top=None, root=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        font9 = "-family {Segoe UI} -size 12 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1087x865+389+59")
        top.title("threads")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        self.top = top
        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.02, rely=0.06, relheight=0.84, relwidth=0.45)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=485)

        self.Active_Threads = ScrolledListBox(self.Frame1, selectmode=EXTENDED, exportselection=0)
        self.Active_Threads.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=0.99)
        self.Active_Threads.configure(background="white")
        self.Active_Threads.configure(disabledforeground="#a3a3a3")
        self.Active_Threads.configure(font="TkFixedFont")
        self.Active_Threads.configure(foreground="black")
        self.Active_Threads.configure(highlightbackground="#d9d9d9")
        self.Active_Threads.configure(highlightcolor="#d9d9d9")
        self.Active_Threads.configure(selectbackground="#c4c4c4")
        self.Active_Threads.configure(selectforeground="black")
        self.Active_Threads.configure(width=10)

        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.6, rely=0.06, relheight=0.84, relwidth=0.37)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")
        self.Frame2.configure(width=405)

        self.selected_Threads = ScrolledListBox(self.Frame2, selectmode=EXTENDED ,exportselection=0)
        self.selected_Threads.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=0.99)
        self.selected_Threads.configure(background="white")
        self.selected_Threads.configure(disabledforeground="#a3a3a3")
        self.selected_Threads.configure(font="TkFixedFont")
        self.selected_Threads.configure(foreground="black")
        self.selected_Threads.configure(highlightbackground="#d9d9d9")
        self.selected_Threads.configure(highlightcolor="#d9d9d9")
        self.selected_Threads.configure(selectbackground="#c4c4c4")
        self.selected_Threads.configure(selectforeground="black")
        self.selected_Threads.configure(width=10)

        self.add_thread = Button(top, command = self.add_one_thread)
        self.add_thread.place(relx=0.5, rely=0.1, height=44, width=87)
        self.add_thread.configure(activebackground="#d9d9d9")
        self.add_thread.configure(activeforeground="#000000")
        self.add_thread.configure(background="#d9d9d9")
        self.add_thread.configure(disabledforeground="#a3a3a3")
        self.add_thread.configure(foreground="#000000")
        self.add_thread.configure(highlightbackground="#d9d9d9")
        self.add_thread.configure(highlightcolor="black")
        self.add_thread.configure(pady="0")
        self.add_thread.configure(text='''ADD >>''')

        self.add_all_thread = Button(top, command = self.add_all_threads)
        self.add_all_thread.place(relx=0.5, rely=0.17, height=44, width=87)
        self.add_all_thread.configure(activebackground="#d9d9d9")
        self.add_all_thread.configure(activeforeground="#000000")
        self.add_all_thread.configure(background="#d9d9d9")
        self.add_all_thread.configure(disabledforeground="#a3a3a3")
        self.add_all_thread.configure(foreground="#000000")
        self.add_all_thread.configure(highlightbackground="#d9d9d9")
        self.add_all_thread.configure(highlightcolor="black")
        self.add_all_thread.configure(pady="0")
        self.add_all_thread.configure(text='''ADD ALL >>''')

        self.remove_thread = Button(top, command = self.remove_one_thread)
        self.remove_thread.place(relx=0.49, rely=0.31, height=44, width=97)
        self.remove_thread.configure(activebackground="#d9d9d9")
        self.remove_thread.configure(activeforeground="#000000")
        self.remove_thread.configure(background="#d9d9d9")
        self.remove_thread.configure(disabledforeground="#a3a3a3")
        self.remove_thread.configure(foreground="#000000")
        self.remove_thread.configure(highlightbackground="#d9d9d9")
        self.remove_thread.configure(highlightcolor="black")
        self.remove_thread.configure(pady="0")
        self.remove_thread.configure(text='''<< REMOVE''')

        self.remove_all_thread = Button(top, command = self.remove_all_threads)
        self.remove_all_thread.place(relx=0.49, rely=0.38, height=44, width=97)
        self.remove_all_thread.configure(activebackground="#d9d9d9")
        self.remove_all_thread.configure(activeforeground="#000000")
        self.remove_all_thread.configure(background="#d9d9d9")
        self.remove_all_thread.configure(disabledforeground="#a3a3a3")
        self.remove_all_thread.configure(foreground="#000000")
        self.remove_all_thread.configure(highlightbackground="#d9d9d9")
        self.remove_all_thread.configure(highlightcolor="black")
        self.remove_all_thread.configure(pady="0")
        self.remove_all_thread.configure(text='''<< REMOVE ALL''')

        self.finish_add_threads = Button(top, command = self.add_to_queue)
        self.finish_add_threads.place(relx=0.49, rely=0.5, height=64, width=97)
        self.finish_add_threads.configure(activebackground="#d9d9d9")
        self.finish_add_threads.configure(activeforeground="#000000")
        self.finish_add_threads.configure(background="#d9d9d9")
        self.finish_add_threads.configure(disabledforeground="#a3a3a3")
        self.finish_add_threads.configure(foreground="#000000")
        self.finish_add_threads.configure(highlightbackground="#d9d9d9")
        self.finish_add_threads.configure(highlightcolor="black")
        self.finish_add_threads.configure(pady="0")
        self.finish_add_threads.configure(text='''DONE''')

        self.Label1 = Label(top)
        self.Label1.place(relx=0.11, rely=0.01, height=31, width=254)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''ALL ACTIVE THREADS''')

        self.Label2 = Label(top)
        self.Label2.place(relx=0.65, rely=0.01, height=31, width=254)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font9)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''SELECTED THREADS''')

        #ADD STUFF
        self.Active_Threads.insert(END, "Getting Threads.....")
        self.root = root


        #EXTRAS
        self.boards_active = []
        self.boards_selected = []

        self.done = False

    # FUNCTION TO GET THE THREADS TO THE ACTUAL UI
    def get_threads_to_gui(self, board):
        self.boards_active = programz.get_threads_from_board(board)
        self.Active_Threads.delete(0, END)
        for i in self.boards_active:
            self.Active_Threads.insert(END, i[1])

    #FUNCTION TO CONTROLL THE ADD BUTTON, ADDS THE SELECTED THREADS TO THE SELECTED LIST
    def add_one_thread(self):
        index = list(map(int, self.Active_Threads.curselection()))
        #ADD AND REMOVE FROM THE LISTS
        for i in index:
            self.boards_selected.append(self.boards_active[i])
            #self.boards_active[i] = "None" # equals to none so that the index can be saved for the delete part
            self.boards_active.pop(i)

        self.Active_Threads.delete(0, END)
        self.selected_Threads.delete(0, END)

        for i in self.boards_active:
            self.Active_Threads.insert(END, i[1])

        for i in self.boards_selected:
            char_list = [i[1][j] for j in range(len(i[1])) if ord(i[1][j]) in range(65536)]
            words=''
            for j in char_list:
                words=words+j
            self.selected_Threads.insert(END, words)

    #FUNCION THAT DELETES THE SELECTED THREADS IN THE SELECT WINDOW AND RETURNS THEM TO THEIR ORIGINAL PLACE IN THE THREADS LIST
    def remove_one_thread(self):
        index = list(map(int, self.selected_Threads.curselection()))
        for i in reversed(index):
            self.boards_active.insert(self.boards_selected[i][2], self.boards_selected[i])
            self.boards_selected.pop(i)

        self.Active_Threads.delete(0, END)
        self.selected_Threads.delete(0, END)

        for i in self.boards_active:
            self.Active_Threads.insert(END, i[1])

        for i in self.boards_selected:
            char_list = [i[1][j] for j in range(len(i[1])) if ord(i[1][j]) in range(65536)]
            words=''
            for j in char_list:
                words=words+j
            self.selected_Threads.insert(END, i[1])


    #FUNCTION THAT CONTROLL THE ADD ALL BUTTON, ADD EVERYTHING TO THE SELECTED LIST
    def add_all_threads(self):
        allThreads = self.boards_active + self.boards_selected
        allThreads = sorted(allThreads, key=lambda th: th[2])

        self.boards_selected = []
        self.boards_selected = allThreads
        self.boards_active = []


        self.Active_Threads.delete(0, END)
        self.selected_Threads.delete(0, END)

        for i in self.boards_active:
            self.Active_Threads.insert(END, i[1])

        for i in self.boards_selected:
            char_list = [i[1][j] for j in range(len(i[1])) if ord(i[1][j]) in range(65536)]
            words=''
            for j in char_list:
                words=words+j
            self.selected_Threads.insert(END, i[1])

    #FUNCTION THAT REMOVES ALL THREADS IN THE SELECTED WINDOW

    def remove_all_threads(self):

        allThreads = self.boards_active + self.boards_selected
        allThreads = sorted(allThreads, key=lambda th: th[2])

        self.boards_selected = []
        self.boards_active = []
        self.boards_active = allThreads


        self.Active_Threads.delete(0, END)
        self.selected_Threads.delete(0, END)

        for i in self.boards_active:
            self.Active_Threads.insert(END, i[1])

        for i in self.boards_selected:
            char_list = [i[1][j] for j in range(len(i[1])) if ord(i[1][j]) in range(65536)]
            words=''
            for j in char_list:
                words=words+j
            self.selected_Threads.insert(END, i[1])

    # FUNCTION THAT ADDS THE THREADS IN THE SELECTED WINDOW TOI THE QUJEUE IN THE ORIGINAL WINDOW, CLOSES TEH THREAD WINDOW
    def add_to_queue(self):
        to_Add = []
        for i in self.boards_selected:
            to_Add.append([i[0], i[1]])
        self.boards_selected = to_Add
        self.top.destroy()



# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
